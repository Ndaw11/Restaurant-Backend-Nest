generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  nom        String
  email      String     @unique
  motDePasse String
  createdAt  DateTime   @default(now())
  role       RoleUser   @default(Client)
  updatedAt  DateTime   @default(now()) @updatedAt
  commande   Commande[]
  panier     Panier[]
}

model Produit {
  id             Int                  @id @default(autoincrement())
  nom            String               @unique
  seuilMinimum   Int
  datePeremption DateTime
  supprimer      Boolean              @default(false)
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  ligneCommandes LigneCommandeStock[]
  mouvements     MouvementStock[]
  plats          PlatProduit[]
  fournisseurs   ProduitFournisseur[]
  stock          Stock?
}

model Fournisseur {
  id              Int                  @id @default(autoincrement())
  nom             String
  contact         Int
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  supprimer       Boolean              @default(false)
  delai_livraison Int
  commandes       CommandeStock[]
  produit         ProduitFournisseur[]
}

model ProduitFournisseur {
  id            Int         @id @default(autoincrement())
  prix          Int
  produitId     Int
  fournisseurId Int
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  fournisseur   Fournisseur @relation(fields: [fournisseurId], references: [id])
  produit       Produit     @relation(fields: [produitId], references: [id])
}

model CommandeStock {
  id            Int                  @id @default(autoincrement())
  etat          Etat                 @default(En_Cours)
  date          DateTime             @default(now())
  fournisseurId Int
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  fournisseur   Fournisseur          @relation(fields: [fournisseurId], references: [id])
  lignes        LigneCommandeStock[]
}

model LigneCommandeStock {
  id           Int           @id @default(autoincrement())
  quantité    Int
  prixUnitaire Int
  commandeId   Int
  produitId    Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  commande     CommandeStock @relation(fields: [commandeId], references: [id])
  produit      Produit       @relation(fields: [produitId], references: [id])
}

model Stock {
  id        Int      @id @default(autoincrement())
  quantité Int
  produitId Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  produit   Produit  @relation(fields: [produitId], references: [id])
}

model MouvementStock {
  id            Int           @id @default(autoincrement())
  quantité     Int
  typeMouvement TypeMouvement
  date          DateTime      @default(now())
  produitId     Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  produit       Produit       @relation(fields: [produitId], references: [id])
}

model Plat {
  id             Int              @id @default(autoincrement())
  nom            String           @unique
  prix           Int
  description    String
  supprimer      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  detailCommande DetailCommande[]
  panierPlat     PanierPlat[]
  produits       PlatProduit[]
}

model PlatProduit {
  id        Int      @id @default(autoincrement())
  quantité Int
  produitId Int
  platId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  plat      Plat     @relation(fields: [platId], references: [id])
  produit   Produit  @relation(fields: [produitId], references: [id])
}

model Commande {
  id         Int              @id @default(autoincrement())
  total      Int
  etat       EtatCommande     @default(En_Cours)
  date       DateTime         @default(now())
  userId     Int
  paiementId Int?             @unique
  factureId  Int?             @unique
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  facture    Facture?         @relation(fields: [factureId], references: [id])
  paiement   Paiement?        @relation(fields: [paiementId], references: [id])
  user       User             @relation(fields: [userId], references: [id])
  details    DetailCommande[]
}

model Panier {
  id             Int              @id @default(autoincrement())
  userId         Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  detailCommande DetailCommande[]
  user           User             @relation(fields: [userId], references: [id])
  plats          PanierPlat[]
}

model PanierPlat {
  id        Int      @id @default(autoincrement())
  panierId  Int
  platId    Int
  quantité Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  panier    Panier   @relation(fields: [panierId], references: [id])
  plat      Plat     @relation(fields: [platId], references: [id])
}

model DetailCommande {
  id         Int      @id @default(autoincrement())
  prix       Int
  quantité  Int
  panierId   Int
  platId     Int
  commandeId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  commande   Commande @relation(fields: [commandeId], references: [id])
  panier     Panier   @relation(fields: [panierId], references: [id])
  plat       Plat     @relation(fields: [platId], references: [id])
}

model Paiement {
  id           Int            @id @default(autoincrement())
  montant      Int
  moyen        MoyenPaiement
  statut       StatutPaiement
  datePaiement DateTime       @default(now())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  commande     Commande?
}

model Facture {
  id        Int       @id @default(autoincrement())
  date      DateTime  @default(now())
  montant   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  commande  Commande?
}

enum RoleUser {
  Admin
  Staff
  Client
}

enum Etat {
  En_Cours
  Terminer
  Annuler
}

enum TypeMouvement {
  Entrer
  Sortie
}

enum EtatCommande {
  En_Cours
  Payer
  Annuler
}

enum MoyenPaiement {
  Espece
  Carte
  Mobile_Money
}

enum StatutPaiement {
  En_Attente
  Valider
  Echouer
}
